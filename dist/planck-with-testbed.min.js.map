{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","native","Math","math","EPSILON","isFinite","x","isNaN","assert","invSqrt","sqrt","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","_ASSERT","Vec2","common","y","this","zero","obj","neo","clone","v","toString","JSON","stringify","isValid","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","invLength","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","lower","lengthSqr","scaleFn","translateFn","debug","statement","err","log","Rot","angle","setAngle","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Vec3","z","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Position","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","data","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","type","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","separations","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","body","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","i1","i2","edge","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","numerator","denominator","minX","minY","maxX","maxY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","rr","sigma","EdgeShape","v1","v2","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","setNext","v3","setPrev","v0","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","height","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","setActive","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","shouldCollide","jn","createFixture","fixdef","fixture","m_newFixture","destroyFixture","found","node","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","_createLoop","_createChain","_setPrevVertex","prevVertex","_setNextVertex","nextVertex","createChain","getChildEdge","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","createProxy","destroyProxy","xf1","xf2","aabb1","aabb2","displacement","moveProxy","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","getBodyList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","insertLeaf","removeLeaf","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","parents","states","root","close","iterator","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","minContact","minAlpha","collideA","collideB","backup1","backup2","bodies","backup","solveIslandTOI","subStep","normalImpulses","tangentImpulses","BoxShape","CollideCircles","circleA","circleB","distSqr","radius","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","hasVertex0","hasVertex3","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","y1","x2","y2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","reverse","inversed","map","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":"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","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.y) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  // Copy vertices.\n  for (var i = 0; i < m; ++i) {\n    this.m_vertices[i] = ps[hull[i]];\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    // Transform vertices and normals.\n    for (var i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n    }\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  // Put the ray into the polygon's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var lower = 0.0;\n  var upper = input.maxFraction;\n\n  var index = -1;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n    var denominator = Vec2.dot(this.m_normals[i], d);\n\n    if (denominator == 0.0) {\n      if (numerator < 0.0) {\n        return false;\n      }\n    } else {\n      // Note: we want this predicate without division:\n      // lower < numerator / denominator, where denominator < 0\n      // Since denominator < 0, we have to flip the inequality:\n      // lower < numerator / denominator <==> denominator * lower > numerator.\n      if (denominator < 0.0 && numerator < lower * denominator) {\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = numerator / denominator;\n        index = i;\n      } else if (denominator > 0.0 && numerator < upper * denominator) {\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = numerator / denominator;\n      }\n    }\n\n    // The use of epsilon here causes the assert on lower to trip\n    // in some cases. Apparently the use of epsilon was to make edge\n    // shapes work, but now those are handled separately.\n    // if (upper < lower - Math.EPSILON)\n    if (upper < lower) {\n      return false;\n    }\n  }\n\n  _ASSERT && common.assert(0.0 <= lower && lower <= input.maxFraction);\n\n  if (index >= 0) {\n    output.fraction = lower;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. This will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext()\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree keep to track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}